@using System.Web.UI.HtmlControls
@using Abp.Authorization
@using ShwasherSys.Authorization.Permissions
@using ShwasherSys.Models.Layout
@using ShwasherSys.Models.Modal

@{
    /**/
    ViewBag.ActiveMenu = PermissionNames.PagesOrderInfoNotCompleteOrderItem; //The menu item will be active for this page.
    ViewBag.Title = "未完成订单明细查询";
    bool isCanViewPrice = IsGranted(PermissionNames.PagesOrderInfoOrderMgQueryOrderPrice);
    List<SelectListItem> OrderStatusList = ViewBag.OrderStatus;
    List<SelectListItem> OrderSaleTypeList = ViewBag.OrderSaleType;
    List<SelectListItem> OrderItemStatusList = new List<SelectListItem>()
{
new SelectListItem()
{
Text = "未完成",
Value = "N"
}
};//ViewBag.OrderItemStatus;
    OrderItemStatusList.AddRange((List<SelectListItem>)ViewBag.OrderItemStatus);
    List<SelectListItem> isOverdue = new List<SelectListItem>()
{

new SelectListItem()
{
Text = "未超期",
Value = "0"
}
,
new SelectListItem()
{
Text = "超期",
Value = "1"
}
};
    var searchForm = new SearchFormViewModal(new List<SearchItem>()
{
//new SearchItem("id", "流水号"),
new SearchItem("sendDate", "发货日期",FiledType.D,ExpType.GreaterOrEqual),
new SearchItem("sendDate", "到",FiledType.D,ExpType.LessOrEqual),
new SearchItem("customerId", "客户编号").SetSearchIcon("query_customer_modal"),
new SearchItem("isOverdue", "已超过送货日期").SetSearchItem(isOverdue),
    new SearchItem("saleType", "内销/外销",FiledType.Inull,ExpType.Equal).SetSearchItem(OrderSaleTypeList),
new SearchItem("orderItemStatusId", "订单明细状态",FiledType.Inull,ExpType.Equal).SetSearchItem(OrderItemStatusList,isAddBlank:false),
    new SearchItem("productName", "产品名称"),
    new SearchItem("model", "规格"),
    new SearchItem("material", "材质"),
    new SearchItem("surfaceColor", "表色"),
    new SearchItem("stockNo", "客户订单号"),
}, false);
}
@section css{
    <link href="~/Content/Plugins/bootstrap-datetimepicker/css/bootstrap-datetimepicker.min.css" rel="stylesheet" />
    <style>
       
        #cbkLabel:after, #cbkLabel:before {
            top: -8px;
        }
        #cbkLabel:after {
            width: 15px;
            height: 15px;
        }
    </style>
}

<div class="table-box mr-4  iwb-bootstrap-table">

    @*@Html.Action("ToolMenu", "Layout", new { pageName = ViewBag.ActiveMenu, searchForm })*@
    <div class="btn-toolbar row" role="toolbar" id="tableTool" aria-label="Toolbar with button groups">
        <div class="col-sm-8 col-lg-9 pull-left" style="padding: 0">
            <div class="btn-group btn-group-sm" id="Tool1" role="group" aria-label="First group">
                @if (PermissionChecker.IsGranted(PermissionNames.PagesOrderInfoOrderQueryMgExportExcel))
                {
                <div  style="display: inline-block;"><input type="checkbox"  class="filled-in" id="ckbExportId" name="ckbExportId" /><label for="ckbExportId" style="margin-left: 10px; color: #f5f5f5;" id="cbkLabel">导出选中明细</label></div>
                
                    <button type="button" class="btn btn-default" data-type="_btnExportExcel" data-url="/api/services/app/OrderItems/ExportExcel" >
                        <i class="iconfont icon-download">导出Excel</i>
                    </button>
                }
            </div>
        </div>
        <div class="col-sm-4 col-lg-3 pull-right" style="padding: 0">
            @*@Html.Action("SearchForm_Sig", "Layout", new { SelectList = selectList })*@
            @Html.Partial("_SearchForm", searchForm)
        </div>
    </div>
    <table id="table"
           data-url="/api/services/app/OrderItems/GetViewAllNot"
           data-striped="true" data-id-field="id" data-unique-id="id"
           data-method="post"
           data-side-pagination="server"
           data-content-type="application/x-www-form-urlencoded; charset=UTF-8"
           data-cache="false"
           data-pagination="true" data-page-size="50" data-page-number="1" data-page-list="[30,50,100,200]" data-pagination-detail-h-align="right" data-pagination-h-align="left" data-resizable="true"
           data-query-params="QueryParams"
           data-response-handler="ResponseHandler"
           data-click-to-select="true"
           data-single-select="false"
           data-show-jumpto="true">
        <thead>
            <tr class="row" id="header">
                <th data-field="state" data-checkbox="true"></th>
                <th data-align="center" data-field="orderNo" data-width="100">订单流水号</th>
                <th data-align="center" data-field="stockNo">客户订单号</th>
                <th data-align="center" data-field="customerName">客户</th>
                <th data-align="center" data-field="orderDate" data-formatter="OrderDateFormatter">订单日期</th>
                <th data-align="center" data-field="partNo">零件号</th>
                <th data-align="center" data-field="productName">产品名称</th>
                <th data-align="center" data-field="model">型号</th>
                <th data-align="center" data-field="material">材质</th>
                <th data-align="center" data-field="surfaceColor">表色</th>
                <th data-align="center" data-field="rigidity">硬度</th>
                <th data-align="center" data-field="quantity" data-formatter="QuantityFormatter">数量</th>
                <th data-align="center" data-field="isSendQuantity">已发数量</th>
                <th data-align="center" data-field="remainingQuantity">剩余数</th>
                <th data-align="center" data-field="sendDate" data-formatter="SendDateFormatter">送货日期</th>
                <th data-align="center" data-field="saleType" data-formatter="SaleTypeFormatter">外销/内销</th>
                <th data-align="center" data-field="isReport" data-formatter="IsReportFormatter">检验报告</th>
                <th data-align="center" data-field="isPartSend" data-formatter="IsPartSendFormatter">部分送货</th>
                <th data-align="center" data-field="orderItemStatusName" data-formatter="OrderItemStatusFormatter">状态</th>
                <th data-align="center" data-field="productNo">产品编号</th>
                @if (isCanViewPrice)
                {
                    <th data-align="center" data-field="currencyId">货币</th>
                    <th data-align="center" data-field="totalPrice" data-formatter="TotalPriceFormatter">含税总价</th>
                    <th data-align="center" data-field="afterTaxTotalPrice" data-formatter="TotalPriceFormatter">不含税总价</th>
                }
            </tr>
        </thead>
    </table>
</div>

@section modal{

    <section>
        @*@Html.Hidden("isForSearch", "0");*@
        @Html.Partial("Modals/Query/_Customer", "KeyWords-3")

    </section>
}

@section scripts
{
    <script src="~/Content/Plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js"></script>
    <script src="~/Content/Plugins/bootstrap-datetimepicker/js/locales/bootstrap-datetimepicker.zh-CN.js"></script>
    <script src="~/Content/Plugins/bootstrap-table/extensions/resizable/colResizable-1.6.min.js"></script>
    <script src="~/Content/Plugins/bootstrap-table/extensions/resizable/bootstrap-table-resizable.js"></script>

    <script type="text/javascript">
        //cId  cStockNo cOrderStatusId cCustomerId cStartDate cEndDate


        var datePickerOpt = {
            language: 'zh-CN',
            format: "yyyy-mm-dd",
            todayBtn: true,
            autoclose: true,
            startView: 2,
            minView: 2,
            maxView: 4
            //showSecond: true,
            //showHours: true,
            //minuteStep: 10
        };
        var isExportById = false;
        $(function () {
            //show完毕前执行

            $("#KeyWords-1").datetimepicker(datePickerOpt);
            $("#KeyWords-2").datetimepicker(datePickerOpt);
            var nowDate = new Date();
            var preDate = new Date(nowDate.getTime() - 30 * 24 * 60 * 60 * 1000);
            var endDate = new Date(nowDate.getTime() + 30 * 24 * 60 * 60 * 1000);
            $("#KeyWords-1").val(preDate.Format("yyyy-MM-dd"));
            $("#KeyWords-2").val(endDate.Format("yyyy-MM-dd"));
            LoadTable();

            //LoadQueryCustomerTable();
            var funs = window.funs || { none: function () { console.log("No type"); } };
            //funs["btnUpdate"] = function () { BtnUpdate({ readonly: "standardName" }); };
            funs["btnExportExcel"] = function (url) {
                BtnExportExcel(url);
            }
            $("#table thead th.bs-checkbox ").off("click.checkOnTable").on("click.checkOnTable",
                function() {
                    $(this).find("input").click();
                });

            $("#ckbExportId").on('change',function(e) {
                if ($(this).is(":checked")) {
                    isExportById = true;
                } else {
                    isExportById = false;
                }
            });

            /*funs["btnCreate"] = function () {
                abp.ajax({
                    url: window.appUrl + 'OrderHeaders/GetNewOrderNo',
                    async: true,
                    type: "Post",
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    isValidate: false,
                    dataType: "json",
                    success: function (res) {
                        BtnCreate({ readonly: "id,sendAdress,customerId ", disabled: "orderStatusId", data: { orderStatusId: "2", id: res, orderDate: GetNowFormatDate() } });
                        //$("#OrderStatusId").val("2").select2();
                    }
                });

            }
*/
            //$("#KeyWords-4").on('init.change',function(e) {
            //    var v = $(this).val();
            //    if (v) {
            //        $(".search-unit [data-index='1']").hide();
            //    } else {
            //        $(".search-unit [data-index='1']").show();
            //    }
            //});
        });

        function BtnExportExcel(url) {
            if (isExportById) {
                window._searchList = [];
                var rows = $("#table").bootstrapTable("getSelections");
                if (rows.length === 0) {
                    abp.message.warn("未选中任何一条记录进行导出！");
                }
                rows.forEach(function(r) {
                    _searchList.push({
                        KeyWords: r.id,
                        KeyField: "id",
                        FieldType: "1",
                        ExpType: "0",
                        LogicType:"1"
                    });
                });
               
            } else {
                GetSearchList();
            }
           
            console.log(_searchList);
            abp.ajax({
                url: url,
                async: true,
                data: JSON.stringify(_searchList),
                type: "Post",
                contentType: 'application/json',
                isValidate: false,
                dataType: "json",
                success: function (res) {
                    window.location.href = "/" + res;
                }
            });
            /*SaveAjax({
                url: url,
                data: _searchList,
                isValidate: false,
                isAlert: false,
                success: function(res) {
                    window.location.href = res;
                }
            });*/
        }

        function GetSearchList() {
            var count = $("#SearchForm").find(".KeyWords").length;
            var isHasIsOverdue = $("#KeyWords-4").val();
            window._searchList = [];
            for (var i = 1; i <= count; i++) {
                var keyWords = $("#KeyWords-" + i).val();
                var keyField = $("#KeyField-" + i).val();

                if (keyWords) {
                   
                    var fieldType = $("#FieldType-" + i).val();
                    var expType = $("#ExpType-" + i).val();
                    //if (fieldType === "5" && expType === "5") {
                    //    var endDate = new Date(keyWords);
                    //    var qDate = new Date(endDate.getTime() + 24 * 60 * 60 * 1000);
                    //    keyWords = qDate.Format("yyyy-MM-dd");
                    //}
                    if (isHasIsOverdue && keyField === "sendDate") {
                        continue;
                    }
                    if (keyField === "isOverdue") {
                        var nowDate = new Date();
                        if (keyWords === "0") {
                            _searchList.push({
                                KeyWords: nowDate.Format("yyyy-MM-dd"),
                                KeyField: "sendDate",
                                FieldType: "5",
                                ExpType: "4"
                            });
                            continue;
                        } else if (keyWords === "1") {
                            _searchList.push({
                                KeyWords: nowDate.Format("yyyy-MM-dd"),
                                KeyField: "sendDate",
                                FieldType: "5",
                                ExpType: "3"
                            });
                            continue;
                        }
                    }
                    if (keyField === "orderItemStatusId") {
                        if (keyWords === "N") {
                            _searchList.push({
                                KeyWords: "11",
                                KeyField: "orderItemStatusId",
                                FieldType: "2",
                                ExpType: "1"
                            });
                            continue;
                        }
                    }
                    _searchList.push({
                        KeyWords: keyWords,
                        KeyField: keyField,
                        FieldType: fieldType,
                        ExpType: expType
                    });
                }
            }
        }

        function OrderItemStatusFormatter(v, r) {
            if (r.orderItemStatusId === 15) {
                return '<span class="label label-success">完成审核</span>';
            } else if (r.orderItemStatusId === 9) {
                return '<span class="label label-danger">发货</span>';
            } else if (r.orderItemStatusId === 11) {
                return '<span class="label label-primary">结束</span>';
            } else if (r.orderItemStatusId === 2) {
                return '<span class="label label-info">新建</span>';
            }
            return v;
        }

        function IsReportFormatter(v, r) {
            var str = "";
            if (v === "Y") {
                str = '<span class="table-action">需要</span>';
            } else if (v === "N") {
                str = '<span class="table-action">不需要</span>';;
            }
            return str;
        }
        function SaleTypeFormatter(v, r) {
            var str = "";
            if (v === 1) {
                str = '<span class="table-action">内销</span>';
            } else if (v === 2) {
                str = '<span class="table-action">外销</span>';;
            }
            return str;
        }
        function SendDateFormatter(v, r) {
            var dataNow = abp.clock.now();
            var sendDate = new Date(v);
            var s1 = dataNow.getTime(), s2 = sendDate.getTime();
            var span = (s2 - s1) / 1000;
            var dayspan = parseInt(span / (24 * 60 * 60));
            if (dayspan < 0) {
                return '<span style="text-decoration:underline;color:#ff0000" >' +
                    sendDate.Format('yyyy-MM-dd') +
                    '</span>';
            }
            if (dayspan > -1 && dayspan < 4) {
                return '<span style="text-decoration:underline;color:#dd4b39" >' +
                    sendDate.Format('yyyy-MM-dd') +
                    '</span>';
            }
            return '<span style="text-decoration:underline;" >' + sendDate.Format('yyyy-MM-dd') + '</span>';
        }

        function QuantityFormatter(v, r) {
            var str = '<span style="text-decoration:underline;" >' + v + '</span>';
            return str;
        }

        function TotalPriceFormatter(v, r) {
            var str = "0.00";
            if (v && v > 0) {
                v = (v * 10000) / 10000;
                str = _formatAmount(v, 4);
            }
            str = '<span style="text-decoration:underline;">' + str + '</span>';
            return str;
        }

        function IsPartSendFormatter(v, r) {
            var str = "";
            if (v === "Y") {
                str = '<span class="table-action">是</span>';
            } else if (v === "N") {
                str = '<span class="table-action">否</span>';;
            }
            return str;
        }


        function OrderDateFormatter(v, r) {
            var orderDate = new Date(v);
            return '<span style="text-decoration:underline;" >' + orderDate.Format('yyyy-MM-dd') + '</span>';
        }


    </script>
    <script>
        // 对Date的扩展，将 Date 转化为指定格式的String
        // 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，
        // 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
        // 例子：
        // (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423
        // (new Date()).Format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18
        Date.prototype.Format = function (fmt) { //author: meizz
            var o = {
                "M+": this.getMonth() + 1, //月份
                "d+": this.getDate(), //日
                "h+": this.getHours(), //小时
                "m+": this.getMinutes(), //分
                "s+": this.getSeconds(), //秒
                "q+": Math.floor((this.getMonth() + 3) / 3), //季度
                "S": this.getMilliseconds() //毫秒
            };
            if (/(y+)/.test(fmt))
                fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
            for (var k in o)
                if (new RegExp("(" + k + ")").test(fmt))
                    fmt = fmt.replace(RegExp.$1,
                        (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            return fmt;
        }

        //将数字转换成金额显示 n是小数点后位数
        function toNumber(num, n) {
            var re = String(num);
            var dotfront = "";
            var dotlast = "";
            if (re.indexof('.') > -1) {
                var sarr = re.spilt('.');
                dotfront = sarr[0];
                dotlast = sarr[1];
                var dotlastlength = strlen(dotlast);
                if (dotlastlength < n) {
                    for (var j = 0; j < n - dotlastlength; j++) {
                        dotlast += "0";
                    }
                }
                if (dotlastlength > n) {
                    dotlast = dotlast.substr(0, n);
                }
            } else {
                dotfront = re;
                for (var i = 0; i < n; i++) {
                    dotlast += "0";
                }
            }
            num = dotfront + '.' + dotlast;
            return num;
        }

        function _formatAmount(strData, n) {
            var CurrencyAndAmountRegExp =
                /^(\d{1,18})|(\d{1,18}\.)|(\d{1,17}\.\d{0,1})|(\d{1,16}\.\d{0,2})|(\.\d{1,2})$/;
            var _result = CurrencyAndAmountRegExp.test(strData);
            if (_result == false) {
                return strData;
            } // 一般来说最多就6位吧，当然如果有特殊需求可自行更改(｀・∀・´)
            n = n > 0 && n <= 6 ? n : 2;
            var formatData = parseFloat((strData + '').replace(/[^\d\.-]/g, '')).toFixed(n) + '';
            var l = formatData.split('.')[0].split('').reverse();
            var r = formatData.split('.')[1];
            var t = '';
            for (i = 0; i < l.length; i++) {
                t += l[i] + ((i + 1) % 3 == 0 && (i + 1) != l.length ? ',' : '');
            }
            return t.split('').reverse().join('') + '.' + r;
        }

        function strlen(str) {
            var len = 0;
            for (var i = 0; i < str.length; i++) {
                var c = str.charCodeAt(i);
                //单字节加1
                if ((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
                    len++;
                } else {
                    len += 2;
                }
            }
            return len;
        }
    </script>


}